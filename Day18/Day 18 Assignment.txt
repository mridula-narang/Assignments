Day 18 Assignment

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingOOPSApp
{
    //Product class to understand abstraction and its needs
    //Product class is an abstract class. We will use this class to create concrete classes.
    public abstract class Product
    {
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }

        public abstract string DeliveryMethod(); //abstract method. describes the delivery method of the product

        public void DisplayProductInfo() //concrete method. displays the product information
        {
            Console.WriteLine($"Product: {Name}, Price: ${Price}");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingOOPSApp
{
    internal class PhysicalProduct : Product
    {
        public string ShippingAddress { get; set; } = string.Empty;
        public PhysicalProduct(string name, double price, string shippingAddress)
        {
            Name = name;
            Price = price;
            ShippingAddress = shippingAddress;
        }
        public override string DeliveryMethod() //implementation of the abstract method
        {
            return "Delivered to the shipping address";
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingOOPSApp
{
    internal class DigitalProduct : Product
    {
        public string FileFormat { get; set; }

        public DigitalProduct(string name, double price, string fileFormat)
        {
            Name = name;
            Price = price;
            FileFormat = fileFormat;
        }

        public override string DeliveryMethod() // implementation of the abstract method
        {
            return "Downloadable via email or online link.";
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
Interfaces are used to define a contract that any class implementing the interface must follow. This contract specifies the methods (and sometimes properties or events) that the implementing class must provide. Interfaces do not contain the implementation of these methods; they only declare them. The purpose is to enforce a certain behavior in classes, which allows for consistent interaction with objects that follow the same interface, regardless of their underlying implementation.

Why Interfaces Have Methods
Abstraction: Interfaces provide a way to abstract what a class should do, without worrying about how it will be done.
Decoupling: Interfaces help to decouple the code, making it easier to maintain and extend. Classes can change their internal implementation without affecting other parts of the system, as long as they still adhere to the interface contract.
Polymorphism: Interfaces enable polymorphic behavior, where you can treat different objects (that implement the same interface) in a similar way.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingOOPSApp
{
    internal interface ICustomer
    {
        void PlaceOrder();
        void CancelOrder();
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnderstandingOOPSApp
{
    public class Customer: ICustomer
    {
        public void PlaceOrder()
        {
            Console.WriteLine("Order placed successfully!");
        }

        public void CancelOrder()
        {
            Console.WriteLine("Order cancelled successfully!");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
namespace UnderstandingOOPSApp
{
    internal class Program
    {
        //create instances of the DigitalProduct and PhysicalProduct classes within a method
        void CreateProductInstances()
        {
            var digitalProduct = new DigitalProduct("Learning C#: E-Book", 10.0, "PDF");
            digitalProduct.DisplayProductInfo();
            Console.WriteLine($"Delivery Method: {digitalProduct.DeliveryMethod()}");
            Console.WriteLine($"File Format: {digitalProduct.FileFormat}");

            var physicalProduct = new PhysicalProduct("Laptop", 1000.0, "1234, 5th Avenue, New York");
            physicalProduct.DisplayProductInfo();
            Console.WriteLine($"Delivery Method: {physicalProduct.DeliveryMethod()}");
            Console.WriteLine($"Shipping Address: {physicalProduct.ShippingAddress}");
        }

        static void Main(string[] args)
        {
            Program program = new Program();
            program.CreateProductInstances();
            ICustomer customer = new Customer();
            customer.PlaceOrder();   
            customer.CancelOrder();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
Abstract Factory Design Pattern (DP)

namespace AbstractFactoryDpApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Create a Lenovo factory
            IDeviceFactory lenovoFactory = new LenovoFactory();
            IDevice lenovoMobile = lenovoFactory.CreateMobile();
            IDevice lenovoLaptop = lenovoFactory.CreateLaptop();
            IDevice lenovoDesktop = lenovoFactory.CreateDesktop();

            lenovoMobile.GetDetails();
            lenovoLaptop.GetDetails();
            lenovoDesktop.GetDetails();

            // Create an HP factory
            IDeviceFactory hpFactory = new HPFactory();
            IDevice hpMobile = hpFactory.CreateMobile();
            IDevice hpLaptop = hpFactory.CreateLaptop();
            IDevice hpDesktop = hpFactory.CreateDesktop();

            hpMobile.GetDetails();
            hpLaptop.GetDetails();
            hpDesktop.GetDetails();

            // Create an IBM factory
            IDeviceFactory ibmFactory = new IBMFactory();
            IDevice ibmMobile = ibmFactory.CreateMobile();
            IDevice ibmLaptop = ibmFactory.CreateLaptop();
            IDevice ibmDesktop = ibmFactory.CreateDesktop();

            ibmMobile.GetDetails();
            ibmLaptop.GetDetails();
            ibmDesktop.GetDetails();

            // Create an Apple factory
            IDeviceFactory appleFactory = new AppleFactory();
            IDevice appleMobile = appleFactory.CreateMobile();
            IDevice appleLaptop = appleFactory.CreateLaptop();
            IDevice appleDesktop = appleFactory.CreateDesktop();

            appleMobile.GetDetails();
            appleLaptop.GetDetails();
            appleDesktop.GetDetails();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class AppleDesktop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Apple Desktop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class AppleLaptop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Apple Laptop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class AppleMobile : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Apple Mobile");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class AppleFactory : IDeviceFactory
    {
        public IDevice CreateMobile()
        {
            return new AppleMobile();
        }

        public IDevice CreateLaptop()
        {
            return new AppleLaptop();
        }

        public IDevice CreateDesktop()
        {
            return new AppleDesktop();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class HPDesktop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("HP Desktop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class HPLaptop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("HP Laptop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class HPMobile : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("HP Mobile");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class HPFactory : IDeviceFactory
    {
        public IDevice CreateMobile()
        {
            return new HPMobile();
        }

        public IDevice CreateLaptop()
        {
            return new HPLaptop();
        }

        public IDevice CreateDesktop()
        {
            return new HPDesktop();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class IBMDesktop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("IBM Desktop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class IBMLaptop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("IBM Laptop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class IBMMobile : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("IBM Mobile");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class IBMFactory : IDeviceFactory
    {
        public IDevice CreateMobile()
        {
            return new IBMMobile();
        }

        public IDevice CreateLaptop()
        {
            return new IBMLaptop();
        }

        public IDevice CreateDesktop()
        {
            return new IBMDesktop();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal interface IDevice
    {
        void GetDetails();
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal interface IDeviceFactory
    {
        IDevice CreateMobile();
        IDevice CreateLaptop();
        IDevice CreateDesktop();
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class LenovoDesktop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Lenovo Desktop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class LenovoLaptop : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Lenovo Laptop");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class LenovoMobile : IDevice
    {
        public void GetDetails()
        {
            Console.WriteLine("Lenovo Mobile");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractFactoryDpApp
{
    internal class LenovoFactory : IDeviceFactory
    {
        public IDevice CreateMobile()
        {
            return new LenovoMobile();
        }

        public IDevice CreateLaptop()
        {
            return new LenovoLaptop();
        }

        public IDevice CreateDesktop()
        {
            return new LenovoDesktop();
        }
    }
}
