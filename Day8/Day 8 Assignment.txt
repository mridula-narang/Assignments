Day 8 Assignment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeePromotionApp
{
    public class Employee
    {
        int id, age;
        string name;
        double salary;

        public Employee()
        {
        }

        public Employee(int id, int age, string name, double salary)
        {
            this.id = id;
            this.age = age;
            this.name = name;
            this.salary = salary;
        }

        public void TakeEmployeeDetailsFromUser()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the employee ID");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Blue;
            id = Convert.ToInt32(Console.ReadLine());
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the employee name");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Blue;
            name = Console.ReadLine();
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the employee age");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Blue;
            age = Convert.ToInt32(Console.ReadLine());
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the employee salary");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Blue;
            salary = Convert.ToDouble(Console.ReadLine());
        }

        public override string ToString()
        {
            return "Employee ID : " + id + "\nName : " + name + "\nAge : " + age + "\nSalary : " + salary;
        }

        public int Id { get => id; set => id = value; }
        public int Age { get => age; set => age = value; }
        public string Name { get => name; set => name = value; }
        public double Salary { get => salary; set => salary = value; }

    }
}
-----------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeePromotionApp
{
    internal class EmployeePromotion
    {
        
        

        List<Employee> employees;
        public EmployeePromotion()
        {
            employees = new List<Employee>();
        }

        //takes employee names in the order in which they are eligible for promotion.
        public void InputEmployeeDetails()
        {
            string name;
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the employee names in the order of their eligibility for promotion. (enter blank to stop): ");
            Console.ResetColor();
            while (true)
            {
                Console.ForegroundColor = ConsoleColor.Blue;
                name = Console.ReadLine();
                Console.ResetColor();

                if (string.IsNullOrWhiteSpace(name))
                {
                    break;
                }
                Employee employee = new Employee();
                employee.Name = name;
                employees.Add(employee);
            }            

        }

        //Solution for question 1 - easy level
        public void DisplayPromotionOrder()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\n Pomoted employee list: \n");
            foreach (var employee in employees)
            {
                Console.WriteLine(employee.Name);
            }
            Console.ResetColor();
        }

        //Solution for question 2 - easy level
        public void FindEmployeePosition()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Please enter the name of the employee to check promotion position");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Blue;
            string name = Console.ReadLine();
            Console.ResetColor();
            int position = employees.FindIndex(e => e.Name == name);
            Console.ForegroundColor = ConsoleColor.Green;
            if (position == -1)
            {
                Console.WriteLine("Employee not found in the promotion list");
            }
            else
            {
                Console.WriteLine($"{name} is the position {position + 1} for promotion");
            }
            Console.ResetColor();
        }
        //Solution for question 4 - easy level
        public void SortEmployeeNames()
        {
            var sortedEmployees = employees.OrderBy(e => e.Name).ToList();
            //print the sorted list
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Promoted Employee list: ");
            foreach (var employee in sortedEmployees)
            {
                Console.WriteLine(employee.Name);
            }
            Console.ResetColor();
        }
        public void RemoveSpace()
        {
            //solution for question 3 - easy level
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"The current size of the collection is {employees.Capacity}");
            employees.TrimExcess();
            Console.WriteLine($"The size after removing extra space is {employees.Count}");
            Console.ResetColor();
        }
        
    }
}
------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeePromotionApp
{
    internal class EmployeeManagement
    {
        private Dictionary<int, Employee> employees = new Dictionary<int, Employee>();
       // private List<Employee> employeeList = new List<Employee>();
        public void AddEmployee(Employee employee)
        {
            try
            {
                if (employees.ContainsKey(employee.Id))
                {
                    throw new ArgumentException("Duplicate Id.");
                }
                employees.Add(employee.Id, employee);
                //employeeList.Add(employee);  // Add to the employee list
                Console.WriteLine("Employee added successfully.");
            }
            catch (ArgumentException)
            {
                Console.WriteLine("Duplicate Id. Employee ID must be unique");
            }
        }
        public void GetEmployeeById(int id)
        {
            try
            {
                if (!employees.ContainsKey(id))
                {
                    throw new KeyNotFoundException("Employee Id not found.");
                }
                Employee employee = employees[id];
                Console.WriteLine(employee);
            }
            catch (KeyNotFoundException e)
            {
                Console.WriteLine("Employee with the provided ID does not exist.");
            }
        }
        public List<Employee> GetAllEmployees()
        {
            return employees.Values.ToList();
        }


        public void FindEmployeesByName(string name)
        {
            //List<Employee> matchingEmployees = new List<Employee>();

            foreach (var employee in employees.Values)
            {

                if (employee.Name == name)
                {

                    Console.WriteLine($"Employee id: {employee.Id}");
                    Console.WriteLine($"Employee name: {employee.Name}");
                    Console.WriteLine($"Emloyee age:{employee.Age}");
                    Console.WriteLine($"Employee salary:{employee.Salary}");
                    Console.WriteLine("----------------------------------");
                }
            }

        }
        public void FindElderEmployees()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\nEnter the ID of the employee to find elders:");
            Console.ResetColor();

            int id = Convert.ToInt32(Console.ReadLine());

            if (employees.ContainsKey(id))
            {
                Employee givenEmployee = employees[id];
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"Employees older than {givenEmployee.Name}:");
                Console.ResetColor();

                bool foundElder = false; // Flag to track if any older employees are found

                foreach (var employee in employees.Values)
                {
                    if (employee.Age > givenEmployee.Age)
                    {
                        Console.WriteLine(employee.Name);
                        foundElder = true;
                    }
                }

                if (!foundElder)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("No employees older than the specified employee.");
                    Console.ResetColor();
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Employee ID not found.");
                Console.ResetColor();
            }
        }

    }

}
------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeePromotionApp
{
    public class SalaryComparer : IComparer<Employee>
    {
        public int Compare(Employee x, Employee y)
        {
            if (x==null||y==null)
            {
                throw new ArgumentNullException("One or more null values");
            }
            return x.Salary.CompareTo(y.Salary);
        }
    }
}
------------------------------------------------------------------------------------------------------------------------
namespace EmployeePromotionApp
{
    internal class Program
    {
        //EmployeePromotion employeePromotion = new EmployeePromotion();
        
        static void Main(string[] args)
        {

            try
            {
                var program = new Program();
                //program.employeePromotion.InputEmployeeDetails();
                //program.employeePromotion.DisplayPromotionOrder(); //method to be called for easy question 1
                //program.employeePromotion.FindEmployeePosition(); //method to be called for easy question 2
                //program.employeePromotion.RemoveSpace(); //method to be called for easy question 3
                //program.employeePromotion.SortEmployeeNames(); //method to be called for easy question 4

                EmployeeManagement employeeManagement = new EmployeeManagement();
                Employee employee1 = new Employee();
                employee1.TakeEmployeeDetailsFromUser();
                employeeManagement.AddEmployee(employee1);


                Employee employee2 = new Employee();
                employee2.TakeEmployeeDetailsFromUser();
                employeeManagement.AddEmployee(employee2);

                //Console.WriteLine("Enter the employee Id to retrieve details: ");
                //int id = Convert.ToInt32(Console.ReadLine());
                //employeeManagement.GetEmployeeById(id);

                //var employeesList = employeeManagement.GetAllEmployees();
                //employeesList.Sort(new SalaryComparer());

                //Console.WriteLine("Employees sorted by salary:");
                //foreach (var emp in employeesList)
                //{
                //    Console.WriteLine(emp);
                //}

                Console.WriteLine("Enter the employee name to be searched ");
                string searchName = Console.ReadLine();
                employeeManagement.FindEmployeesByName(searchName);
            }
            catch (ArgumentNullException)
            {
                Console.WriteLine("One or both employees are null");

            }
            
            
        }
    }
}
---------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeeManagementApp
{
    internal class EmployeeManager
    {
        private Dictionary<int, Employee> employees = new Dictionary<int, Employee>();

        public void AddEmployee()
        {
            try
            {
                Employee emp = new Employee();
                emp.TakeEmployeeDetailsFromUser();
                if (employees.ContainsKey(emp.Id))
                {
                    Console.WriteLine("Employee with this id already exists");
                }
                else
                {
                    employees.Add(emp.Id, emp);
                    Console.WriteLine("Employee added successfully");
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Invalid input format. Please enter correct data types.");
            }
        }
        public void PrintAllEmployees()
        {
            try
            {
                if (employees.Count == 0)
                {
                    Console.WriteLine("No employees to display.");
                    return;
                }

                foreach (var emp in employees.Values)
                {
                    Console.WriteLine(emp);
                    Console.WriteLine();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while printing employee details: {ex.Message}");
            }
        }
        public void ModifyEmployeeDetails()
        {
            try
            {
                Console.WriteLine("Enter the employee ID to modify:");
                int id = Convert.ToInt32(Console.ReadLine());

                if (employees.TryGetValue(id, out Employee emp))
                {
                    Console.WriteLine("Enter new details for the employee:");
                    Console.WriteLine("Name:");
                    emp.Name = Console.ReadLine();
                    Console.WriteLine("Age:");
                    emp.Age = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Salary:");
                    emp.Salary = Convert.ToDouble(Console.ReadLine());
                    Console.WriteLine("Employee details updated successfully.");
                }
                else
                {
                    Console.WriteLine("Employee with this ID does not exist.");
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Invalid input format. Please enter correct data types.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while modifying employee details: {ex.Message}");
            }
        }

        public void PrintEmployeeById()
        {
            try
            {
                Console.WriteLine("Enter the employee ID to display:");
                int id = Convert.ToInt32(Console.ReadLine());

                if (employees.TryGetValue(id, out Employee emp))
                {
                    Console.WriteLine(emp);
                }
                else
                {
                    Console.WriteLine("Employee with this ID does not exist.");
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Invalid input format. Please enter a valid employee ID.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while printing employee details: {ex.Message}");
            }
        }

        public void DeleteEmployee()
        {
            try
            {
                Console.WriteLine("Enter the employee ID to delete:");
                int id = Convert.ToInt32(Console.ReadLine());

                if (employees.Remove(id))
                {
                    Console.WriteLine("Employee deleted successfully.");
                }
                else
                {
                    Console.WriteLine("Employee with this ID does not exist.");
                }
            }
            catch (FormatException)
            {
                Console.WriteLine("Invalid input format. Please enter a valid employee ID.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while deleting the employee: {ex.Message}");
            }
        }


    }

}
--------------------------------------------------------------------------------------------------------------------------
namespace EmployeeManagementApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            EmployeeManager manager = new EmployeeManager();
            bool running = true;

            while (running)
            {
                try
                {
                    Console.WriteLine("Menu:");
                    Console.WriteLine("1. Print all employees");
                    Console.WriteLine("2. Add employee");
                    Console.WriteLine("3. Modify employee details");
                    Console.WriteLine("4. Print employee by ID");
                    Console.WriteLine("5. Delete employee");
                    Console.WriteLine("6. Exit");
                    Console.Write("Choose an option: ");
                    string choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            manager.PrintAllEmployees();
                            break;
                        case "2":
                            manager.AddEmployee();
                            break;
                        case "3":
                            manager.ModifyEmployeeDetails();
                            break;
                        case "4":
                            manager.PrintEmployeeById();
                            break;
                        case "5":
                            manager.DeleteEmployee();
                            break;
                        case "6":
                            running = false;
                            Console.WriteLine("Exiting...");
                            break;
                        default:
                            Console.WriteLine("Invalid choice. Please try again.");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"An unexpected error occurred: {ex.Message}");
                }
            }
        }
    }
}
