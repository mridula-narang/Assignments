Question 1 - Product Management

Program.cs file
namespace ProductManagementApp
{
    internal class Program
    {
        ICustomerService customerService;
        ISupplierService supplierService;
        public Program()
        {
            customerService = new ProductServices();
            supplierService = new ProductServices();
        }
        public void PrintMenu()
        {
            Console.WriteLine("Welcome to shopping application.");
            Console.WriteLine("Enter 1 if you are a customer");
            Console.WriteLine("Enter 2 if you are a supplier");
            Console.WriteLine("Enter 0 to exit");
        }

        public void CustomerMenu()
        {
            Console.WriteLine("Welcome dear customer! We are happy to have you back to our store");
            Console.WriteLine("Enter 1 to buy a product");
            Console.WriteLine("Enter 2 to view all products");
            Console.WriteLine("Enter 0 to go back to main menu");
        }

        public void SupplierMenu() 
        {
            Console.WriteLine("Welcome dear supplier!");
            Console.WriteLine("Enter 1 to add new product");
            Console.WriteLine("Enter 2 to view all products");
            Console.WriteLine("Enter 3 to update product quantity");
            Console.WriteLine("Enter 0 to go back to main menu");
        }
        void MainInteractionConsole()
        {
            int choice;
            do
            {
                PrintMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        CustomerInteractionConsole();
                        break;
                    case 2:
                        SupplierInteractionConsole();
                        break;
                    case 0:
                        Console.WriteLine("Thank you for shopping with us. Have a nice day!");
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please enter a valid choice");
                        break;
                }
            }
            while (choice != 0);
        }
        void CustomerInteractionConsole()
        {
            int choice;
            do
            {
                CustomerMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        BuyProduct();
                        break;
                    case 2:
                        customerService.ViewAllProducts();
                        break;
                    case 0:
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please enter a valid choice");
                        break;
                }
            }
            while (true);
        }
        void SupplierInteractionConsole()
        {
            int choice;
            do
            {
                SupplierMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        AddNewProduct();
                        break;
                    case 2:
                        supplierService.ViewProductsBySupplier();
                        break;
                    case 3:
                        UpdateProductQuantity();
                        break;
                    case 0:
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please enter a valid choice");
                        break;
                }
            }
            while (true);
        }
        private void BuyProduct()
        {
            Console.WriteLine("Enter your customer id:");
            int customerId = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("Enter Product ID to Buy:");
            int productId = Convert.ToInt32(Console.ReadLine());

            Customer customer = new Customer { Id = customerId }; 
            Product product = new Product { Id = productId }; 
            customerService.BuyProduct(customer, product);
        }
        private void AddNewProduct()
        {
            Console.WriteLine("Enter Supplier ID:");
            int supplierId = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("Enter Product ID:");
            int productId = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Product Name:");
            string productName = Console.ReadLine();
            Console.WriteLine("Enter Product Price:");
            int price = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Quantity:");
            int quantity = Convert.ToInt32(Console.ReadLine());

            Supplier supplier = new Supplier { Id = supplierId }; 
            Product product = new Product { Id = productId, Name = productName, Price = price, Quantity = quantity };
            supplierService.AddProduct(supplier, product);
        }
        private void UpdateProductQuantity()
        {
            Console.WriteLine("Enter Supplier ID:");
            int supplierId = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("Enter Product ID to Update Quantity:");
            int productId = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter New Quantity:");
            int newQuantity = Convert.ToInt32(Console.ReadLine());

            Supplier supplier = new Supplier { Id = supplierId }; // Assuming supplier is created
            Product product = new Product { Id = productId, Quantity = newQuantity };
            supplierService.UpdateProductQuantity(supplier, product); --
        }
        static void Main(string[] args)
        {
            var program = new Program();
            program.MainInteractionConsole();
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Product.cs file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal class Product
    {
        public Product()
        { 
        }
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Price { get; set; }
        public int Quantity { get; set; }
        public int SupplierId { get; set; }

        public Product(int id, string name, int price, int quantity, int supplierId)
        {
            Id = id;
            Name = name;
            Price = price;
            Quantity = quantity;
            SupplierId = supplierId;
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Customer.cs file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal class Customer
    {
        public Customer()
        {   
        }

        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;

        public Customer(int id, string name, string phone)
        {
            Id = id;
            Name = name;
            Phone = phone;
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Supplier.cs file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal class Supplier
    {
        public Supplier()
        {
        }
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public Supplier(int id, string name)
        {
            Id = id;
            Name = name;
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ISupplierService.cs (Interface) file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal interface ISupplierService
    {
        void UpdateProductQuantity(Supplier supplier, Product product);
        void ViewProductsBySupplier();
        void AddProduct(Supplier supplier, Product product);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ICustomerService.cs (Interface) file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal interface ICustomerService
    {
        void BuyProduct(Customer customer, Product product);
        void ViewAllProducts();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ProductServices.cs file:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductManagementApp
{
    internal class ProductServices : ICustomerService, ISupplierService
    {
        Product[] products = new Product[10];
        Customer[] customers = new Customer[4];
        Supplier[] suppliers = new Supplier[4];
        private int count;
        public ProductServices()
        {
            products = new Product[]
            {
                new Product { Id = 1, Name = "Laptop", Price = 500000, Quantity = 5, SupplierId = 1 },
                new Product { Id = 2, Name = "Mobile", Price = 20000, Quantity = 10, SupplierId = 3 },
                new Product { Id = 3, Name = "Tablet", Price = 10000, Quantity = 15, SupplierId = 4 },
                new Product { Id = 4, Name = "Desktop", Price = 30000, Quantity = 20, SupplierId = 2 }
            };
            count = products.Length;
            // Initialize arrays with actual customers
            customers = new Customer[]
            {
                new Customer { Id = 1, Name = "James", Phone = "6749545709" },
                new Customer { Id = 2, Name = "Harry", Phone = "7684757888" },
                new Customer { Id = 3, Name = "Ron", Phone = "8475663846" },
                new Customer { Id = 4, Name = "Hermione", Phone = "8993766658" }
            };

            // Initialize arrays with actual suppliers
            suppliers = new Supplier[]
            {
                new Supplier { Id = 1, Name = "Dell" },
                new Supplier { Id = 2, Name = "Apple" },
                new Supplier { Id = 3, Name = "Samsung" },
                new Supplier { Id = 4, Name = "HP" }
            };


        }

        private Product GetProductById(int pid)
        {
            Product product = null;
            for (int i = 0; i < products.Length; i++)
            {
                if (products[i].Id == pid)
                {
                    product = products[i];
                    break;
                }
            }
            return product;
        }

        public void BuyProduct(Customer customer, Product product)
        {
            if (customer == null)
            {
                Console.WriteLine("Customer not found");
                return;
            }

            Product ProductToBuy = GetProductById(product.Id);
            if (ProductToBuy != null)
            {
                if (ProductToBuy.Quantity > 0)
                {
                    ProductToBuy.Quantity--;
                    Console.WriteLine("Thank you for buying the product.");
                }
                else
                {
                    Console.WriteLine("Product is out of stock.");
                }
            }
            else
            {
                Console.WriteLine("Product not found");
            }
        }


        public void ViewAllProducts()
        {
            foreach (var product in products)
            {
                Console.WriteLine($"Product Id: {product.Id}, Name: {product.Name}, Price: {product.Price}, Quantity: {product.Quantity}");
            }
        }

        public void UpdateProductQuantity(Supplier supplier, Product product)
        {
            //allow supplier to increase quantity of products in the list
            Product ProductToAdd = GetProductById(product.Id);
            if (ProductToAdd != null)
            {
                ProductToAdd.Quantity++;
                Console.WriteLine("Product quantity updated");
            }
            else
            {
                Console.WriteLine("Product not found");
            }
        }

        public void ViewProductsBySupplier()
        {
            Console.WriteLine("Enter supplier ID to view products:");
            int supplierId = Convert.ToInt32(Console.ReadLine());

            bool found = false;
            foreach (var product in products)
            {
                if (product != null && product.SupplierId == supplierId) 
                {
                    Console.WriteLine($"Product Id: {product.Id}, Name: {product.Name}, Price: {product.Price}, Quantity: {product.Quantity}");
                    found = true;
                }
            }
            if (!found)
            {
                Console.WriteLine("No products found for the given supplier ID.");
            }
        }

        //specific supplier can add new product
        public void AddProduct(Supplier supplier, Product product)
        {
            bool supplierAuthorized = Array.Exists(suppliers, s => s.Id == supplier.Id);

            if (supplierAuthorized)
            {
                if (GetProductById(product.Id) != null)
                {
                    Console.WriteLine("Product already exists.");
                }
                else
                {
                    // Check if there's enough space in the array, if not, resize
                    if (count >= products.Length)
                    {
                        Array.Resize(ref products, products.Length * 2);
                    }

                    product.SupplierId = supplier.Id;
                    products[count] = product;
                    count++;
                    Console.WriteLine("Product added successfully.");
                }
            }
            else
            {
                Console.WriteLine("Supplier not authorized to add products.");
            }
        }



    }
}
